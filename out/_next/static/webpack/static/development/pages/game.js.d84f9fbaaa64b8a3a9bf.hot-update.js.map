{"version":3,"file":"static/webpack/static/development/pages/game.js.d84f9fbaaa64b8a3a9bf.hot-update.js","sources":["webpack:///./components/gameView.js"],"sourcesContent":["/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\nimport QuestionCard from './questionCard';\nimport GameControl from './gameControl';\nimport GameOver from './gameoverView';\n\nconst Background = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: linear-gradient(#0fb9b1, #2bcbba);\n  transform-origin: top left;\n  z-index: -1000;\n\n  @media (max-width: 800px) {\n    height: 80%;\n  }\n`;\n\nconst Main = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  margin: 0 auto;\n  width: 100%;\n  max-width: 1200px;\n\n  .line {\n    width: 100%;\n    height: 3px;\n    background: #fff;\n\n    @media (max-width: 800px) {\n      margin: 0.5rem;\n    }\n  }\n\n  > * {\n    margin: 2rem 0;\n  }\n`;\n\nconst Explanation = styled.p`\n  color: #fff;\n  width: 40%;\n  text-align: center;\n  margin: 0;\n  font-size: 2rem;\n\n  @media (max-width: 800px) {\n    font-size: 1.4rem;\n    width: 100%;\n  }\n`;\n\nconst GameStatus = styled.p`\n  color: #fff;\n  font-size: 2rem;\n\n  @media (max-width: 800px) {\n    margin: 0;\n    font-size: 1.2rem;\n  }\n`;\n\nclass GameView extends Component {\n  URL = 'http://localhost:9000/getQuestions';\n\n  state = {\n    questions: [],\n    questionsCount: 0,\n    currentQuestion: 0,\n    quizIsRunning: true,\n    showExplanation: false,\n    correctAnswers: 0,\n    questionAnswered: false,\n    showError: false,\n    success: false,\n  };\n\n  async componentDidMount() {\n    const res = await axios.get(this.URL);\n    if (res.data) {\n      const shuffledQuestions = res.data.sort(() => Math.random() - 0.5);\n      this.setState({\n        questions: shuffledQuestions,\n        questionsCount: shuffledQuestions.length,\n      });\n    }\n  }\n\n  answerSelected = e => {\n    if (this.state.questionAnswered) return;\n    this.setState({ questionAnswered: true, showExplanation: true });\n    if (e.target.className === 'correct') {\n      this.setState(prevState => ({\n        correctAnswers: prevState.correctAnswers + 1,\n        success: true,\n      }));\n    }\n  };\n\n  nextQuestion = () => {\n    // check if game is over\n    if (this.state.questionsCount - 1 == this.state.currentQuestion) {\n      this.setState({ quizIsRunning: false });\n      return;\n    }\n    this.setState(prevState => ({\n      currentQuestion: prevState.currentQuestion + 1,\n      questionAnswered: false,\n      showExplanation: false,\n      success: false,\n    }));\n  };\n\n  render() {\n    const currentQuestion =\n      this.state.questions[this.state.currentQuestion] || '';\n\n    return (\n      <>\n        <Background></Background>\n        {this.state.quizIsRunning ? (\n          <Main>\n            <GameStatus>\n              Question {this.state.currentQuestion + 1} of{' '}\n              {this.state.questions.length}\n            </GameStatus>\n\n            <QuestionCard\n              question={currentQuestion || ''}\n              answerSelected={this.answerSelected}\n            ></QuestionCard>\n\n            {this.state.showExplanation && (\n              <>\n                <Explanation>\n                  {this.state.success ? 'Correct üî•' : 'Ooooohps üòÆ‚ùå'}\n                </Explanation>\n                <Explanation>{currentQuestion.explanation}</Explanation>\n              </>\n            )}\n            <div className=\"line\"></div>\n            <GameControl\n              disabled={!this.state.questionAnswered}\n              next={this.nextQuestion}\n              isLastQuestion={\n                this.state.currentQuestion + 1 == this.state.questionsCount\n              }\n            ></GameControl>\n          </Main>\n        ) : (\n          <GameOver\n            correctAnswers={this.state.correctAnswers}\n            questionsCount={this.state.questionsCount}\n          ></GameOver>\n        )}\n      </>\n    );\n  }\n}\n\nexport default GameView;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AAwBA;AAaA;AACA;AASA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAsBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAMA;AACA;;;;;;;;;;;;;;;;AAlCA;AACA;;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;;;;;;;;;;;AA2BA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA/FA;AACA;AAiGA;;;;A","sourceRoot":""}